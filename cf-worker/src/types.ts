// Import all shared types
export * from "../../shared-types";

import type { GroupMetadata, GroupBudgetData } from "../../shared-types";
import type { auth } from "./auth";
import type { user } from "./db/schema/auth-schema";

// The Env type and all Cloudflare Workers types are available globally from worker-configuration.d.ts
// generated by `wrangler types`

export type Session = NonNullable<
	Awaited<ReturnType<ReturnType<typeof auth>["api"]["getSession"]>>
>;
export type User = Session["user"];

// Session context (CF Worker specific)
export interface CurrentSession {
	currentUser: typeof user.$inferSelect;
	usersById: Record<string, typeof user.$inferSelect>;
	group: ParsedGroup | null;
	currencies?: string[];
}

// Parsed group data (JSON strings parsed into structured data)
export interface ParsedGroup {
	groupid: string;
	budgets: GroupBudgetData[];
	userids: string[];
	metadata: GroupMetadata;
}

// Cookie options (CF Worker specific)
export interface CookieOptions {
	httpOnly?: boolean;
	secure?: boolean;
	sameSite?: "Strict" | "Lax" | "None";
	path?: string;
	maxAge?: number;
	expires?: Date;
	domain?: string;
}

// Database result types
export interface UserRow {
	id: number;
	username: string;
	first_name: string;
	last_name: string;
	groupid: string;
	password: string;
	created_at: string;
}

export interface TransactionRow {
	id: number;
	description: string;
	amount: number;
	created_at: string;
	metadata: string;
	currency: string;
	transaction_id: string;
	group_id: string;
	deleted?: string;
}

export interface TransactionDetailRow {
	transaction_id: string;
	user_id: number;
	amount: number;
	owed_to_user_id: number;
	group_id: string;
	currency: string;
	deleted?: string;
	first_name: string;
}

// Utility types for balance calculations
export interface SplitAmount {
	user_id: string; // Changed to string for better-auth compatibility
	amount: number;
	owed_to_user_id: string; // Changed to string for better-auth compatibility
	currency: string;
}

export interface BatchStatement {
	sql: string;
	params: (string | number)[];
}

export interface UserBalance {
	user_id: string; // Changed to string for better-auth compatibility
	owed_to_user_id: string; // Changed to string for better-auth compatibility
	currency: string;
	amount: number;
}

export interface BudgetTotal {
	currency: string;
	amount: number;
}

// Budget handler types
export interface BudgetEntry {
	name: string;
	currency: string;
	amount: number;
}

export type UserBalancesByUser = Record<string, Record<string, number>>;

// Split handler types
export interface SplitwiseResponse {
	id: number;
}

export interface TransactionCreateResponse {
	message: string;
	transactionId: string;
}

// Group metadata update types
export interface UpdateGroupMetadataRequest {
	groupid: string;
	defaultShare?: Record<string, number>;
	defaultCurrency?: string;
	groupName?: string;
	budgets?: string[];
}

export interface UpdateGroupMetadataResponse {
	message: string;
	metadata: GroupMetadata;
}
